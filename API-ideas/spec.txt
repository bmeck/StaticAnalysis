// ALL OPERATIONS RUN ON LOOKUP
// implementing well known types (Map/Set)
// still results in lazy lookup

BlockMap implements Map<Number, Block> {
}

Step {
  // list of steps that could lead to this one
  // steps could be ahead of this step
  StepSet origins();
  ScriptLocation location();
  Calculation effect();
  // where to store the result, could be a "hidden" variable
  // spec 8.1.1 
  EnvironmentRecord storage();
  BranchSet branches();
}

Calculation {
  Operation operation();
  OperandSet operands();
}

OperandSet implements Set<Operand> {
}

// Well known references?
// - CompletionRecord 6.2.2
// - This 
// - Arguments
Operand {
  // REFERENCE => Reference, from spec : 6.2.3
  // LITERAL => Value, use the value
  {REFERENCE,LITERAL} type();
  Value value;
}

Reference {
  // env records should use a constant as the base?
  // special hidden variables use an EnvironmentRecord
  Value base;
  String name;
  Boolean strict;
}

StepSet implements Set<Step> {
}

BranchSet implements Set<Branch> {
}

Branch {
  // branch with higher priority than this one
  Branch primary();
  Calculation condition();
  Step target;
}

// Roughly a Lexical Environment from spec 6.2.5
Block implements BlockContainer{
  {LOCAL,FUNCTION,DYNAMIC,SCRIPT,MODULE} type();
  StepSet steps();
  BlockMap children();
  BindingMap bindings();
}

BindingMap implements Map<String, Binding> {
}

Binding {
  // things like fn f(x) => arguments[0] , x
  // calculation should return what needs to have it's binding updated
  CalculationSet mirrors();
}

Script implements BlockContainer {
  String name();
  // see eval/Function
  Script parent();
}

ComparableLocation<Type> {
  {BEFORE,SAME,AFTER,UNRELATED} compareLocationTo(Type other);
}
